apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.team2767.deadeye"
        minSdkVersion 23
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
                abiFilters 'armeabi-v7a', 'arm64-v8a'
                arguments "-DOpenCV_DIR=" + file(getOpenCVDir() + '/sdk/native/jni')
            }
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            // let gradle pack the shared library into apk
            jniLibs.srcDirs = [getOpenCVDir() + '/sdk/native/libs']
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a'
            universalApk false
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0-alpha01'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-alpha2'
    implementation 'androidx.annotation:annotation:1.0.1'
    compileOnly 'com.google.auto.factory:auto-factory:1.0-beta5@jar'
    annotationProcessor 'com.google.auto.factory:auto-factory:1.0-beta5'
    // https://google.github.io/dagger/
    annotationProcessor 'com.google.dagger:dagger-compiler:2.19'
    implementation 'com.google.dagger:dagger:2.19'
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    // https://github.com/JakeWharton/timber
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // https://github.com/ReactiveX/RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.16'
    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'
    // http://jakewharton.github.io/butterknife/
    implementation 'com.jakewharton:butterknife:9.0.0-rc2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0-rc2'
    // https://github.com/oli107/material-range-bar/tree/master
    implementation 'com.appyvet:materialrangebar:1.4.3'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}

def getOpenCVDir() {
    Properties properties = new Properties()
    properties.load(new File(rootDir.absolutePath + "/local.properties").newDataInputStream())
    def ocvDir = properties.getProperty('opencv.dir', null)
    if (ocvDir == null) {
        throw new GradleException(
                "OpenCV location not found. Define location with opencv.dir in the local.properties file!")
    }
    if (!file(ocvDir).exists()) {
        throw new GradleException("OpenCV dir in local.properties file not found: " + ocvDir)
    }
    return ocvDir
}
